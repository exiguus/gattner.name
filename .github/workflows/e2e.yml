name: E2E
on:
  push:
    branches: [main]
    paths:
      - "apps/**"
  pull_request:
    branches: [main]
    paths:
      - "apps/**"

jobs:
  test_setup:
    name: Test Setup
    runs-on: ubuntu-latest
    outputs:
      preview_url: ${{ steps.waitForVercelPreviewDeployment.outputs.url }}
      production_url: ${{ steps.waitForVercelProductionDeployment.outputs.url || env.VERCEL_DEPLOYMENT_URL }}
    steps:
      - name: Wait for Vercel preview deployment to be ready
        if: github.event_name == 'pull_request'
        uses: patrickedqvist/wait-for-vercel-preview@v1.3.1
        id: waitForVercelPreviewDeployment
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          max_timeout: 600
          environment: Preview – gattner-name-corporate
      - name: Wait for Vercel production deployment to be ready
        if: github.event_name == 'push'
        uses: patrickedqvist/wait-for-vercel-preview@v1.3.1
        id: waitForVercelProductionDeployment
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          max_timeout: 600
          environment: Production – gattner-name-corporate
      - name: Retrieve deployment URL
        if: github.event_name == 'push'
        run: "echo VERCEL_DEPLOYMENT_URL=www.gattner.name >> $GITHUB_ENV"
      - name: Await Vercel deployment
        uses: UnlyEd/github-action-await-vercel@v1.2.39
        if: github.event_name == 'push'
        id: await-vercel
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        with:
          deployment-url: ${{ env.VERCEL_DEPLOYMENT_URL }}
          timeout: 10 # Wait for 10 seconds before failing
      - name: Displays the deployment name
        if: github.event_name == 'push'
        run: "echo The deployment at ${{ fromJson(steps.await-vercel.outputs.deploymentDetails).url }} is ${{ fromJson(steps.await-vercel.outputs.deploymentDetails).readyState }}"

  test_run:
    needs: test_setup
    name: Test run
    timeout-minutes: 15
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: Install pnpm
        run: npm install -g pnpm
      - name: Install dependencies
        run: pnpm install
      - name: Build packages
        run: pnpm build:packages
        env:
          GITLAB_API_BEARER_TOKEN: ${{ secrets.GITLAB_API_BEARER_TOKEN }}
          GITLAB_PROJECT_ID: ${{ secrets.GITLAB_PROJECT_ID }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      - name: Install corporate dependencies
        run: cd apps/corporate && pnpm install
        env:
          GITLAB_API_BEARER_TOKEN: ${{ secrets.GITLAB_API_BEARER_TOKEN }}
          GITLAB_PROJECT_ID: ${{ secrets.GITLAB_PROJECT_ID }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      - name: Update corporate data
        run: cd apps/corporate && pnpm data:update
        env:
          GITLAB_API_BEARER_TOKEN: ${{ secrets.GITLAB_API_BEARER_TOKEN }}
          GITLAB_PROJECT_ID: ${{ secrets.GITLAB_PROJECT_ID }}
      - name: Install Playwright Browsers
        run: pnpm exec playwright install --with-deps
      - name: Run Playwright tests
        run: cd apps/corporate && pnpm test:e2e
        env:
          E2E_TEST_BASE_URL: ${{ needs.test_setup.outputs.preview_url || needs.test_setup.outputs.production_url }}
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30
